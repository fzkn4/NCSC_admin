using System;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace NCSC
{
    public static class FirebaseHelper
    {
        private static readonly HttpClient client = new HttpClient();
        private static readonly string baseUrl = "https://ncsc-c04bc-default-rtdb.firebaseio.com/"; // No need to change

        // Automatically generates a unique key under the path (like push())
        public static async Task<string> PushDataAsync(string path, object data)
        {
            string json = JsonConvert.SerializeObject(data);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            var response = await client.PostAsync($"{baseUrl}{path}.json", content);
            string result = await response.Content.ReadAsStringAsync();

            dynamic res = JsonConvert.DeserializeObject(result);
            return res.name; // Returns the key generated by Firebase
        }

        // Overwrites data at the exact path (like put())
        public static async Task SetDataAsync(string path, object data)
        {
            string json = JsonConvert.SerializeObject(data);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            await client.PutAsync($"{baseUrl}{path}.json", content);
        }

        public static async Task<string> GetDataAsync(string path)
        {
            var response = await client.GetAsync($"{baseUrl}{path}.json");
            return await response.Content.ReadAsStringAsync();
        }

        // Optional: Deserialize response to object
        public static async Task<T> GetDataAsync<T>(string path)
        {
            var json = await GetDataAsync(path);
            return JsonConvert.DeserializeObject<T>(json);
        }

        public static async Task<string> PushSampleBeneficiaryAsync()
        {
            var rand = new Random();
            int age = rand.Next(60, 100);
            DateTime birthDate = DateTime.Now.AddYears(-age).AddDays(rand.Next(0, 365));
            DateTime validatedDate = DateTime.Now.AddDays(-rand.Next(0, 365));

            // List of valid provinces
            string[] provinces = { "Zamboanga del Norte", "Zamboanga del Sur", "Zamboanga Sibugay", "Zamboanga City", "Isabela City" };
            string randomProvince = provinces[rand.Next(provinces.Length)];

            var sample = new Beneficiary
            {
                batch_code = $"BATCH-{rand.Next(1000, 9999)}",
                age = age.ToString(),
                birth_date = birthDate.ToShortDateString(),
                sex = rand.Next(2) == 0 ? "Male" : "Female",
                region = "Region IX",
                province = randomProvince,
                municipality = "Municipal 1",
                barangay = "Barangay 1",
                date_validated = validatedDate.ToShortDateString(),
                pwd = rand.Next(2) == 0 ? "Yes" : "No",
                ip = rand.Next(2) == 0 ? "Yes" : "No"
            };

            return await PushDataAsync("beneficiaries", sample);
        }
    }
}
